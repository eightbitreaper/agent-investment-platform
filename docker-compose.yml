version: '3.8'

services:
  # Main application service
  agent-investment-platform:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: agent-investment-platform
    restart: unless-stopped
    ports:
      - "8000:8000" # Main web interface
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/investment_platform
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./models:/app/models
      - ./.memory:/app/.memory
    depends_on:
      - postgres
      - redis
    networks:
      - investment-network
    healthcheck:
      test: [ "CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MCP Servers
  mcp-stock-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: mcp-stock-server
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    env_file:
      - .env
    command: [ "node", "src/mcp-servers/stock-data-server.js" ]
    depends_on:
      - redis
    networks:
      - investment-network

  mcp-news-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: mcp-news-server
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
    env_file:
      - .env
    command: [ "node", "src/mcp-servers/news-analysis-server.js" ]
    depends_on:
      - redis
    networks:
      - investment-network

  mcp-youtube-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: mcp-youtube-server
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
    env_file:
      - .env
    command: [ "node", "src/mcp-servers/youtube-transcript-server.js" ]
    depends_on:
      - redis
    networks:
      - investment-network

  mcp-analysis-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: mcp-analysis-server
    restart: unless-stopped
    ports:
      - "3004:3004"
    environment:
      - PYTHONPATH=/app
      - PORT=3004
    env_file:
      - .env
    command: [ "python", "-m", "src.mcp_servers.analysis_engine_server" ]
    depends_on:
      - postgres
      - redis
    networks:
      - investment-network

  mcp-financial-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: mcp-financial-server
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - PYTHONPATH=/app
      - PORT=3000
    env_file:
      - .env
    command: [ "python", "-m", "src.mcp_servers.financial_data_server" ]
    depends_on:
      - redis
    networks:
      - investment-network

  # Database services
  postgres:
    image: postgres:15-alpine
    container_name: postgres-investment
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=investment_platform
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-investment_platform_2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - investment-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: redis-investment
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-investment_redis_2024}
    volumes:
      - redis_data:/data
    networks:
      - investment-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama for local LLM with GPU acceleration
  ollama:
    image: ollama/ollama:latest
    container_name: ollama-investment
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
      - OLLAMA_ORIGINS=*
    networks:
      - investment-network
    # GPU support for NVIDIA
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [ gpu ]
    profiles:
      - local-llm
      - development
      - production
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:11434/api/tags || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Open WebUI - Professional chat interface for Ollama
  ollama-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: ollama-webui
    restart: unless-stopped
    ports:
      - "8080:8080" # Web interface
    volumes:
      - ./data/ollama-webui:/app/backend/data
    networks:
      - investment-network
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - WEBUI_NAME=AI Investment Assistant
      - ENABLE_SIGNUP=false
      - DEFAULT_USER_ROLE=admin
      - WEBUI_AUTH=false
      - ENABLE_FUNCTION_CALLING=true
      - MCP_SERVERS=http://mcp-financial-server:3000,http://mcp-analysis-server:3004
    depends_on:
      - ollama
      - mcp-analysis-server
    profiles:
      - local-llm
      - development
      - production
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and observability
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-investment
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - investment-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-investment
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - investment-network
    profiles:
      - monitoring

  # Reverse proxy and SSL termination
  nginx:
    image: nginx:alpine
    container_name: nginx-investment
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - agent-investment-platform
    networks:
      - investment-network
    profiles:
      - production

  # Development services
  dev-environment:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: dev-investment-platform
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "8888:8888" # Jupyter notebook
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/investment_platform
    env_file:
      - .env
    volumes:
      - .:/app
      - /app/node_modules # Prevent overwriting node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - investment-network
    profiles:
      - development
    command: [ "tail", "-f", "/dev/null" ]

# Networks
networks:
  investment-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
